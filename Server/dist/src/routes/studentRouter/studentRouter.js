"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.studentRouter = void 0;
var express_1 = __importDefault(require("express"));
var studentRouter = express_1.default.Router();
exports.studentRouter = studentRouter;
var studentController_1 = require("../../controller/studentController/studentController");
var authMiddleware_1 = require("../../middleware/authMiddleware");
var upload_1 = __importDefault(require("../../multer/upload"));
var tutorController_1 = require("../../controller/tutorController/tutorController");
studentRouter.get("/", function (req, res) {
    res.json({ status: true });
});
studentRouter.post("/register", studentController_1.studentRegistration);
studentRouter.post("/login", studentController_1.studentLogin);
studentRouter.post("/otp", studentController_1.verifyOtp);
studentRouter.get("/resendotp", studentController_1.resendOtp);
studentRouter.get("/otpExpiry", studentController_1.otpExpiry);
studentRouter.get("/firebaseAuthVerify", studentController_1.GoogleAuthentication);
studentRouter.post("/forgotpassword", studentController_1.forgotPassword);
studentRouter.post("/verifyforgototp", studentController_1.verifyForgotPassword);
studentRouter.post("/newpassword", studentController_1.newPassword);
studentRouter.get("/getcourses", studentController_1.getAllCourses);
studentRouter.get("/get-category", tutorController_1.GetAllCategory);
studentRouter.post("/addtocart", authMiddleware_1.isAuth, studentController_1.addToCart);
studentRouter.get("/cart/:studentId", authMiddleware_1.isAuth, studentController_1.getCartItems);
studentRouter.delete("/removecartitem/:cartItemId", authMiddleware_1.isAuth, studentController_1.removeCartItem);
studentRouter.post("/addtowishlist", authMiddleware_1.isAuth, studentController_1.addToWishlist);
studentRouter.get("/wishlist/:studentId", authMiddleware_1.isAuth, studentController_1.getWishlistItems);
studentRouter.delete("/removeitem/:wishlistItemId", authMiddleware_1.isAuth, studentController_1.removeWishlistItem);
studentRouter.post("/editprofile", authMiddleware_1.isAuth, upload_1.default.single('image'), studentController_1.StudentEditProfile);
studentRouter.post('/stripepayment', studentController_1.stripePayment);
studentRouter.post('/clear-cart', authMiddleware_1.isAuth, studentController_1.deleteCart);
studentRouter.get('/enrolled-course/:studentId', authMiddleware_1.isAuth, studentController_1.enrolledCourses);
studentRouter.get('/get-category/:categoryId', authMiddleware_1.isAuth, studentController_1.fetchCategory);
studentRouter.get('/get-tutor/:id', authMiddleware_1.isAuth, studentController_1.getTutorDetails);
studentRouter.get('/tutor-list', authMiddleware_1.isAuth, studentController_1.getTutorList);
studentRouter.post('/cancel-course', authMiddleware_1.isAuth, studentController_1.cancelCourse);
studentRouter.get('/wallet-balance/:studentId', authMiddleware_1.isAuth, studentController_1.getBalance);
studentRouter.get('/wallet-transactions/:studentId', authMiddleware_1.isAuth, studentController_1.getTransactions);
studentRouter.post('/update-balance', authMiddleware_1.isAuth, studentController_1.updateWalletBalance);
studentRouter.post('/post-review', authMiddleware_1.isAuth, studentController_1.postReview);
studentRouter.get('/get-rating/:courseId/:studentId', authMiddleware_1.isAuth, studentController_1.getRating);
studentRouter.get('/all-ratings/:courseId', authMiddleware_1.isAuth, studentController_1.getAllRatings);
studentRouter.get('/student-view-quiz/:courseId', authMiddleware_1.isAuth, studentController_1.fetchQuizzesByCourse);
studentRouter.get('/get-average-rating', studentController_1.getAverageRatings);
studentRouter.post('/student-progress', authMiddleware_1.isAuth, studentController_1.updatedProgress);
studentRouter.get('/get-progress/:courseId/:studentId', authMiddleware_1.isAuth, studentController_1.fetchProgress);
studentRouter.post("/logout", studentController_1.studentLogout);
studentRouter.get('/test', authMiddleware_1.isAuth, function (req, res) {
    res.status(200).json({ message: "Hello" });
});
studentRouter.post("/refresh", studentController_1.refreshTokenCreation);
